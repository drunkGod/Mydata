一、项目安装
1.下载安装node.js。直到 node -v , npm -v 都有返回值。
2.npm安装：npm install -gd express --registry=http://registry.npm.taobao.org	(配置npm的运行环境)
	一般使用cnpm：npm install -g cnpm --registry=http://registry.npm.taobao.org
（npm(node package manager)是nodejs的包管理。用于node插件管理（安装、卸载、管理依赖等）。cnpm是国内镜像（因为插件从国外下载））
3.npm安装脚手架2：npm install -gd vue-cli ,或cnpm install -gd vue-cli (-s 正式环境， -d 正式环境和开发环境, 所以可以写成 -g -d)，装完之后可以查 vue -V
4.初始化项目： vue init webpack projName	(两个选项：vue-router路由跳转、ESLint风格)
5.进入项目：cd projName、 npm run dev 或者 cnpm run dev
6.修改项目：npm run build，重新打包。然后npm run dev 或者 cnpm run dev 或者将结果打包到服务器。

二、vue2项目开发
1.vue2项目有六个文件夹：
	build：webpack构建，一般不用；
	config：最常见配置选项的主配置文件，可配置启动端口等，偶尔用；
	node_modules：项目依赖相关，一直不用；
	*src：开发的东西放里面，最重要，一直用；（五个资产：assets文件夹、components文件夹、router文件夹、App.vue、main.js）
	static：静态资源文件，不受webpack控制，原样获取，偶尔用；
	test：测试单元，一般不用。
	index.html：单页应用程序的模板index.html。 在开发和构建期间，Webpack将生成资产，并将生成的资产的URL自动注入到此模板中以呈现最终的HTML。
    package.json：包含所有构建依赖项和构建命令的NPM软件包元文件。
	
2.重要的是src文件夹。
	assets # 模块资源（由webpack处理）
	components # ui组件 （每个.vue文件由三部分组成：<template></template>、<style></style>、<script></script>）
	router # 路由（index.js控制首页）
	main.js # 应用入口文件
	App.vue # 主应用程序组件
	
3.vue执行顺序
	①执行index.html文件 （所以样式对所有文件生效）
	②执行main.js文件
	③main.js挂载了app.vue文件，用app.vue的templete替换index.html中的<div id="app"></div>
    ④main.js中注入了路由文件，将对应的组件渲染到router-view中
5.页面跳转（routes中index.js控制，去除#：mode: 'history'）：
	-平行路由：routes: [{path:'/p1', component:c1},{path:'p2', component:c2}]
	①开发页面：在自己的templates#div中 <router-link to="/p1">跳向p1</router-link>；
	②引入页面：在routes中index.js中，import导入对应页面路径； 
	③注册路由：在routes中index.js的routes对象中，修改添加 {path: 'p1', component: c1}。 

	-父子路由：routes中的对象： {path:'path1', component:c1, children:[{path:'p11',component:c11}]}
	①开发页面：在父级的templates#div中 <router-link to="/p11">跳向p11</router-link>，并添加<router-view></router-view>，此时会父子一起显示；
	②引入父子页面：在routes中index.js中，import导入对应页面路径； 
	③注册父子路由：在routes中index.js的routes对象中，修改添加 {path: 'p1', component: c1, children:[{path:'p11',component:c11}]}。 
	
三、vue3项目开发
1.卸载vue-cli2: npm uninstall vue-cli -g
2.安装vue-cli3: npm install -g @vue-cli  或者  cnpm install -g @vue/cli	 （多了一个关键字@）
3.vue图形界面（vue3以上）：vue ui
4.vue-cli3创建项目：vue create vue-test3，启动：npm run serve
	（service:编译和热更新，适用于开发环境， build:编译并压缩，适用于生产环境）
4.vue3项目有三个文件夹：
	node_modules：项目依赖相关，一直不用；
	public：放的一些静态资源，不会动的，可以通过ip:port/直接访问。
	src: 开发的东西放里面，最重要，一直用；（五个资产：assets文件夹、components文件夹、views文件夹、App.vue、main.js、router.js）
5.vue3运行2的项目：还是要先cnpm install一下，然后再用vue2的语法运行：npm run dev
6.1xx.vue中引入样式：在<style></style>中添加： @import "../../public/css/xx.css"
6.2xx.vue中引入组件：在<script></script>中添加引入： import xx from "../../component/xx.vue" , 然后再定义 export default{ components: {xx} }，最后使用：<xx></xx>
6.3xx.vue中引入js：
		6.3.1 定义总线msg.js：
			import Vue from 'vue'
			export default new Vue
		6.3.2 .vue中定义$emit()回调总线js：
			import Msg from "./msg.js"
			export default{
				methods: {
					toLink1: function(){
						Msg.$emit('val', '1');
					}

				}
			}
		6.3.3 另一个.vue文件中使用总线js回调的方法：
			import Msg from './msg.js'
			export default ({
				data(){
					return {"k":0}
				},
				mounted: function(){
					var _this = this;
					Msg.$on('val', function(v){
						_this.k = v;
					})
				}
			})
		

四、模拟ajax调用：axios
1.cnpm install axios -S
2.在main.js中全局注入axios: 
	import axios from 'axios'
	Vue.prototype.$http = axios
3.使用时： 
	var url = "data.json";
	this.$http.get(url).then(function(res){
		console.log(res.data);
	}
	
4.页面跳转：
	params 传参 : 相当于post请求，页面跳转时参数不会在地址栏中显示
	query 传参 : 相当于get请求，页面跳转时参数会在地址栏中显示
	注意：传参是 router ， 接收参数是 route
	跳转时：
	handleSubmit() {
		this.$router.push({
		  path:"/mainPage", 
		  params: {
			 name: this.name,
			 password: this.password
		  }})
	  }
	或者用get是把params改成query。
	接收时：
	data(){
		return {
			loginInfo: this.$route.query.name+"++"+this.$route.query.password
		  }
	},
	  